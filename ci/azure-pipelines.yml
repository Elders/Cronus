# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
trigger:
    branches:
      include:
      - master
      - beta
      - next
      - next-major
    paths:
      exclude:
      - docs/CHANGELOG.md

pool:
  vmImage: 'ubuntu-latest'

  container: elders/dotnet-npm:0.0.2

variables:
  buildConfiguration: 'Release'

jobs:
- job: Build
  condition: true

  steps:
  - checkout: self
    clean: true
    persistCredentials: true

  - task: Bash@3
    name: GetNextVersion
    env:
      STAGING_PATH: $(Build.ArtifactStagingDirectory)
      LOCAL_PATH: $(Build.Repository.LocalPath)
    inputs:
      targetType: 'inline'
      script: |
        npm install
        npx semantic-release -d
        export SEMVER=$(cat semver.txt)
        echo "##vso[task.setvariable variable=SEMVER;isOutput=true;]$SEMVER"
        if [ "$SEMVER" != "" ]; then export semverDefined="true"; fi
        echo "##vso[task.setvariable variable=semverDefined;isOutput=true;]$semverDefined"

  - task: DotNetCoreCLI@2
    inputs:
      command: 'build'
      projects: 'src/Elders.Cronus/*.csproj'

- job: Artifact
  dependsOn: ['Build']

  variables:
    SEMVER: $[dependencies.Build.outputs['GetNextVersion.SEMVER']]
  condition: eq(dependencies.Build.outputs['GetNextVersion.semverDefined'], true)

  steps:
  - checkout: self
    clean: true
    persistCredentials: true
  - task: DotNetCoreCLI@2
    name: Pack
    inputs:
      command: 'pack'
      packagesToPack: 'src/Elders.Cronus/*.csproj'
      versioningScheme: 'off'
      buildProperties: 'PackageVersion=$(SEMVER)'

  - task: Bash@3
    name: Release
    env:
      STAGING_PATH: $(Build.ArtifactStagingDirectory)
      LOCAL_PATH: $(Build.Repository.LocalPath)
    inputs:
      targetType: 'inline'
      script: |
        npm install
        npx semantic-release --no-ci

  - task: NuGetCommand@2
    name: Publish
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
      nuGetFeedType: 'external'
      publishFeedCredentials: 'CI-AzurePipelines'
